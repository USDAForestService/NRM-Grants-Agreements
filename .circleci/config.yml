# Python CircleCI 2.0 configuration file
# Circle docs https://circleci.com/docs/2.0/language-python/
# Set deployment variables in CircleCI as environment variables
version: 2

install-node-dependencies: &install-node-dependencies
  run:
    name: Node install
    working_directory: ~/project
    command: npm ci

install-node-api-deps: &install-node-api-deps
  run:
    name: Node install
    working_directory: ~/project/api
    command: npm ci

install-node-frontend-deps: &install-node-frontend-deps
  run:
    name: Node install
    working_directory: ~/project/frontend
    command: npm ci

install-python-dependencies: &install-python-dependencies
  run:
    name: Install python dependencies
    working_directory: ~/project/nrm_django
    command: |
      pipenv install

install-python-dev-dependencies: &install-python-dev-dependencies
  run:
    name: Install python dependencies
    working_directory: ~/project/nrm_django
    command: |
      pipenv install --dev

# Snippet for installing CloudFoundry CLI version 7
install-cf7: &install-cf7
  run:
    name: Install CF7
    command: |
      curl -L -o cf7.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=v7&source=github'
      sudo dpkg -i cf7.deb
      rm cf7.deb
      cf7 api https://api.fr.cloud.gov

jobs:
  build-and-test: # runs not using Workflows must have a `build` job as entry point
    docker:
      - image: circleci/python:3.9.1-node-browsers
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://postgres:postgres@localhost/postgres?sslmode=disable
      - image: postgres:10.1-alpine
        environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

    steps:
      - checkout
      - *install-node-dependencies
      - *install-node-api-deps
      - *install-node-frontend-deps
      - *install-python-dependencies
      - *install-python-dev-dependencies
      - run:
          name: Run prettier
          working_directory: ~/project
          command: |
            npx prettier --check api/src/**/*.ts
            npx prettier --check frontend/src/**/*.ts
      - *install-python-dependencies
      - *install-python-dev-dependencies
      - run:
          name: Run bandit (Python security) tests
          working_directory: ~/project/nrm_django
          command: |
            pipenv run bandit -r nrm_django/nrm_app
      - run:
          name: Create the database
          working_directory: ~/project/nrm_django
          command: |
            pipenv run python manage.py migrate --settings=nrm_site.settings.test
      - run:
          name: "[api] Run spec"
          working_directory: ~/project/api
          command: |
            npm run test
      - run:
          name: "[frontend] Run spec"
          working_directory: ~/project/frontend
          command: |
            npm run test
      - run:
          name: Run unit tests & check coverage
          working_directory: ~/project/nrm_django
          command: |
            pipenv run coverage run --source='nrm_app' manage.py test --settings=nrm_site.settings.test nrm_app
            pipenv run coverage report --fail-under=10 -m  # TODO: raise this back up when we have tests
      - store_artifacts:
          path: ./pa11y/screencaps
      - run:
          name: Run server for a11y tests
          working_directory: ~/project/nrm_django
          environment:
            DEBUG: true
          command: |
            # Create admin user for Pa11y testing
            echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_user('a11y_admin', 'admin@usda.gov', 'password')" | pipenv run ./manage.py shell --settings=nrm_site.settings.test
            # Run server
            pipenv run ./manage.py runserver 8000 --settings=nrm_site.settings.test
          background: true
      - run:
          name: Run pa11y-ci accessibility check
          working_directory: ~/project
          command: |
            sleep 10
            curl --retry 10 --retry-delay 5 --retry-connrefused --silent --output /dev/null http://127.0.0.1:8000/admin
            # The bang (!) negates the non-zero exit code and forces the build to pass even though pa11y tests do not pass.
            ! npm run test:a11y


  deploy:  # deploy to cloud.gov, conditional for which branch is in the workflow
    docker:
      - image: cimg/python:3.9.1
    environment: # environment variables for primary container
      PIPENV_VENV_IN_PROJECT: true
      DATABASE_URL:
    steps:
      - checkout
      - *install-cf7
      - run:
          name: Login to cloud.gov
          command: cf7 login -u ${CLOUD_USERNAME} -p ${CLOUD_PASSWORD} -o sandbox-usda -s neil.martinsen-burrell
      - run:
          name: Deploy fs-nrm app
          working_directory: ~/project/nrm_django
          command: cf7 push fs-nrm --strategy rolling

workflows:
  version: 2
  build_test:
    jobs:
      - build-and-test

      - deploy:
          requires:
            - build-and-test
          filters:
            branches:
              only: main
